#!/bin/bash

# MellowMind Desktop App Bundle Launcher
# This script is executed when the app bundle is double-clicked
# Deployment-ready version with flexible path detection

# Function to show error dialog
show_error() {
    osascript -e "display dialog \"$1\" with title \"MellowMind Error\" buttons {\"OK\"} default button \"OK\" with icon stop"
}

# Function to find app.py in various possible locations
find_app_directory() {
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Possible locations relative to this script
    local possible_paths=(
        "$script_dir/../../../src/app.py"           # Standard app bundle structure
        "$script_dir/../../../app.py"               # App.py in root
        "$script_dir/../../src/app.py"              # Alternative structure
        "$script_dir/../../app.py"                  # Alternative structure
        "$script_dir/../src/app.py"                 # Closer structure
        "$script_dir/../app.py"                     # Closer structure
        "$script_dir/src/app.py"                    # Same directory
        "$script_dir/app.py"                        # Same directory
    )
    
    # Also check current working directory and common locations
    possible_paths+=(
        "$(pwd)/src/app.py"
        "$(pwd)/app.py"
        "$(dirname "$script_dir")/src/app.py"
        "$(dirname "$script_dir")/app.py"
    )
    
    # DEPLOYMENT SCENARIO: MellowMind.app on Desktop, src in ~/Script subfolders
    # Search in user's Script directory and subdirectories
    local user_home="$HOME"
    if [ -d "$user_home/Script" ]; then
        echo "üîç Searching in ~/Script directory and subdirectories..."
        # Search up to 3 levels deep in Script directory
        while IFS= read -r -d '' script_path; do
            possible_paths+=("$script_path")
        done < <(find "$user_home/Script" -maxdepth 3 -name "app.py" -path "*/src/app.py" -print0 2>/dev/null)
        
        # Also check for app.py directly in Script subdirectories
        while IFS= read -r -d '' script_path; do
            possible_paths+=("$script_path")
        done < <(find "$user_home/Script" -maxdepth 3 -name "app.py" -print0 2>/dev/null)
    fi
    
    # Also check common script directory variations
    for script_dir_name in "Script" "Scripts" "script" "scripts" "MellowMind" "mellowmind"; do
        if [ -d "$user_home/$script_dir_name" ]; then
            while IFS= read -r -d '' script_path; do
                possible_paths+=("$script_path")
            done < <(find "$user_home/$script_dir_name" -maxdepth 3 -name "app.py" -print0 2>/dev/null)
        fi
    done
    
    # Search in Desktop subdirectories (in case user puts everything on Desktop)
    if [ -d "$user_home/Desktop" ]; then
        while IFS= read -r -d '' desktop_path; do
            possible_paths+=("$desktop_path")
        done < <(find "$user_home/Desktop" -maxdepth 2 -name "app.py" -print0 2>/dev/null)
    fi
    
    echo "üîç Checking ${#possible_paths[@]} possible locations for app.py..."
    
    for path in "${possible_paths[@]}"; do
        if [ -f "$path" ]; then
            echo "‚úÖ Found app.py at: $path"
            echo "$(dirname "$path")"
            return 0
        fi
    done
    
    return 1
}

# Function to find suitable Python interpreter
find_python() {
    local python_candidates=(
        # Check for common conda environments
        "$HOME/miniconda3/envs/moly/bin/python"
        "$HOME/anaconda3/envs/moly/bin/python"
        "/opt/miniconda3/envs/moly/bin/python"
        "/opt/anaconda3/envs/moly/bin/python"
        "/usr/local/miniconda3/envs/moly/bin/python"
        "/usr/local/anaconda3/envs/moly/bin/python"
        
        # Check for conda environments with different names
        "$HOME/miniconda3/envs/mellowmind/bin/python"
        "$HOME/anaconda3/envs/mellowmind/bin/python"
        
        # Check for system Python installations
        "/usr/local/bin/python3"
        "/usr/bin/python3"
        "/opt/homebrew/bin/python3"
        
        # Check PATH
        "python3"
        "python"
    )
    
    for python_path in "${python_candidates[@]}"; do
        if command -v "$python_path" &> /dev/null; then
            # Test if this Python has the required basic modules
            if "$python_path" -c "import sys, os, json" &> /dev/null; then
                echo "$python_path"
                return 0
            fi
        fi
    done
    
    return 1
}

echo "üßò Starting MellowMind Desktop Application..."

# Find the application directory
echo "üîç Searching for application files..."
APP_DIR=$(find_app_directory)
if [ $? -ne 0 ] || [ -z "$APP_DIR" ]; then
    echo "‚ùå Error: Could not find app.py in any expected location"
    show_error "Could not find app.py. Please ensure MellowMind application files are properly installed."
    exit 1
fi

echo "üìÇ Found application directory: $APP_DIR"

# Change to the app directory
cd "$APP_DIR" || {
    echo "‚ùå Error: Could not change to application directory"
    show_error "Could not access application directory: $APP_DIR"
    exit 1
}

# Find suitable Python interpreter
echo "üêç Searching for Python interpreter..."
PYTHON_PATH=$(find_python)
if [ $? -ne 0 ] || [ -z "$PYTHON_PATH" ]; then
    echo "‚ùå Error: No suitable Python interpreter found!"
    show_error "No suitable Python interpreter found! Please install Python3 or set up a conda environment with the required packages."
    exit 1
fi

echo "üêç Using Python: $PYTHON_PATH"

# Determine the correct app.py path
if [ -f "src/app.py" ]; then
    APP_SCRIPT="src/app.py"
elif [ -f "app.py" ]; then
    APP_SCRIPT="app.py"
else
    echo "‚ùå Error: app.py not found in expected location"
    show_error "app.py not found in $APP_DIR. Please check the installation."
    exit 1
fi

# Check for required dependencies (optional - don't fail if missing)
echo "üîç Checking dependencies..."
MISSING_DEPS=""
for dep in "PyQt6" "cv2" "PyPDF2"; do
    if ! "$PYTHON_PATH" -c "import $dep" &> /dev/null; then
        MISSING_DEPS="$MISSING_DEPS $dep"
    fi
done

if [ -n "$MISSING_DEPS" ]; then
    echo "‚ö†Ô∏è Warning: Some dependencies may be missing:$MISSING_DEPS"
    # Don't show error dialog for missing deps, just log it
fi

# Set up environment variables for relative paths
export MELLOWMIND_ROOT="$(pwd)"

# Launch the application
echo "üöÄ Launching MellowMind from: $(pwd)"
echo "üöÄ Running: $PYTHON_PATH $APP_SCRIPT"

# Use exec to replace the shell process with Python
exec "$PYTHON_PATH" "$APP_SCRIPT"